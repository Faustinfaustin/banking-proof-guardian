
import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Eye, Upload, CheckCircle, XCircle, Shield, Lock } from 'lucide-react';
import { useZKProof } from '@/hooks/useZKProof';

const ComplianceVerifier = () => {
  const { verifyProof, isVerifying } = useZKProof();
  const [proofInput, setProofInput] = useState('');
  const [verificationResult, setVerificationResult] = useState<any>(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [adminPassword, setAdminPassword] = useState('');
  const [isAuthenticating, setIsAuthenticating] = useState(false);

  const authenticateAdmin = async () => {
    setIsAuthenticating(true);
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    if (adminPassword === 'admin123') {
      setIsAdmin(true);
      setAdminPassword('');
    } else {
      alert('Invalid administrator credentials');
    }
    setIsAuthenticating(false);
  };

  const handleVerifyProof = async () => {
    if (!proofInput.trim()) {
      alert('Please enter a proof to verify');
      return;
    }

    try {
      const proofData = JSON.parse(proofInput);
      const result = await verifyProof(proofData.proof, proofData.publicSignals);
      setVerificationResult(result);
    } catch (error) {
      alert('Invalid proof format. Please enter valid JSON.');
    }
  };

  const loadProofFromFile = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        setProofInput(content);
      };
      reader.readAsText(file);
    }
  };

  if (!isAdmin) {
    return (
      <Card className="bg-white/10 backdrop-blur-md border-white/20">
        <CardHeader>
          <CardTitle className="text-white flex items-center">
            <Lock className="w-5 h-5 mr-2 text-yellow-400" />
            Government Administrator Access
          </CardTitle>
          <CardDescription className="text-blue-200">
            Administrative credentials required to verify proofs generated by banks
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <label className="block text-white text-sm mb-2">Admin Password</label>
            <Input
              type="password"
              placeholder="Enter administrator password"
              value={adminPassword}
              onChange={(e) => setAdminPassword(e.target.value)}
              className="bg-white/10 border-white/20 text-white placeholder:text-gray-400"
              onKeyPress={(e) => e.key === 'Enter' && authenticateAdmin()}
            />
            <p className="text-blue-200 text-xs mt-1">Demo password: admin123</p>
          </div>
          <Button 
            onClick={authenticateAdmin}
            disabled={isAuthenticating || !adminPassword}
            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white"
          >
            {isAuthenticating ? 'Authenticating...' : 'Access Admin Panel'}
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Admin Header */}
      <Card className="bg-white/10 backdrop-blur-md border-white/20">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Shield className="w-6 h-6 text-green-400" />
              <div>
                <h3 className="text-white font-semibold">Government Administrator Panel</h3>
                <p className="text-blue-200 text-sm">Verifying bank compliance proofs</p>
              </div>
            </div>
            <Button 
              onClick={() => setIsAdmin(false)}
              variant="outline"
              className="bg-white/10 border-white/20 text-white hover:bg-white/20"
            >
              Logout
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Proof Input */}
      <Card className="bg-white/10 backdrop-blur-md border-white/20">
        <CardHeader>
          <CardTitle className="text-white flex items-center">
            <Eye className="w-5 h-5 mr-2" />
            Compliance Proof Verification
          </CardTitle>
          <CardDescription className="text-blue-200">
            Verify zero-knowledge proofs for Livret A compliance with Article R221-2
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <label className="block text-white text-sm">Proof Data (JSON)</label>
            <Textarea
              placeholder="Paste proof JSON here or upload from file..."
              value={proofInput}
              onChange={(e) => setProofInput(e.target.value)}
              className="bg-white/10 border-white/20 text-white placeholder:text-gray-400 font-mono text-sm min-h-[200px]"
            />
          </div>
          
          <div className="flex gap-4">
            <div className="flex-1">
              <input
                type="file"
                accept=".json"
                onChange={loadProofFromFile}
                className="hidden"
                id="proof-file-upload"
              />
              <label htmlFor="proof-file-upload">
                <Button 
                  variant="outline"
                  className="w-full bg-white/10 border-white/20 text-white hover:bg-white/20 cursor-pointer"
                  asChild
                >
                  <span>
                    <Upload className="w-4 h-4 mr-2" />
                    Upload Proof File
                  </span>
                </Button>
              </label>
            </div>
            
            <div className="flex-1">
              <Button 
                onClick={handleVerifyProof}
                disabled={isVerifying || !proofInput.trim()}
                className="w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white"
              >
                {isVerifying ? 'Verifying...' : 'Verify Proof'}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Verification Results */}
      {verificationResult && (
        <Card className="bg-white/10 backdrop-blur-md border-white/20">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              {verificationResult.isValid ? (
                <CheckCircle className="w-5 h-5 mr-2 text-green-400" />
              ) : (
                <XCircle className="w-5 h-5 mr-2 text-red-400" />
              )}
              Verification Result
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <Badge 
                  variant={verificationResult.isValid ? "default" : "destructive"}
                  className={verificationResult.isValid ? "bg-green-500" : "bg-red-500"}
                >
                  {verificationResult.isValid ? 'VALID' : 'INVALID'}
                </Badge>
                <span className="text-white">
                  {verificationResult.isValid 
                    ? 'Proof is valid - All accounts comply with Article R221-2 limits'
                    : 'Proof is invalid or shows non-compliance'
                  }
                </span>
              </div>
              
              {verificationResult.metadata && (
                <div className="space-y-4">
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
                    <div>
                      <span className="text-blue-200">Protocol:</span>
                      <p className="text-white font-medium">{verificationResult.metadata.protocol}</p>
                    </div>
                    <div>
                      <span className="text-blue-200">Processing Time:</span>
                      <p className="text-white font-medium">{Math.round(verificationResult.metadata.processingTime)}ms</p>
                    </div>
                    <div>
                      <span className="text-blue-200">Verified:</span>
                      <p className="text-white font-medium">{new Date(verificationResult.metadata.timestamp).toLocaleTimeString()}</p>
                    </div>
                  </div>
                  
                  {/* Account Type Verification Breakdown */}
                  {verificationResult.metadata.accountTypes && (
                    <div>
                      <span className="text-blue-200 text-sm block mb-2">Accounts Verified by Type:</span>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                        {Object.entries(verificationResult.metadata.accountTypes).map(([type, count]) => (
                          <div key={type} className="bg-white/5 rounded-lg p-3 border border-white/10">
                            <div className="flex items-center justify-between">
                              <span className="text-white text-sm font-medium">
                                {type === 'individual' ? 'Individual' : 
                                 type === 'association' ? 'Association' : 
                                 type === 'large_condominium' ? 'Large Condominium' : type}
                              </span>
                              <Badge variant="secondary" className="bg-blue-500/20 text-blue-300 border-blue-400/30">
                                {count as number} account{(count as number) !== 1 ? 's' : ''}
                              </Badge>
                            </div>
                            {verificationResult.metadata.accountTypeLimits && verificationResult.metadata.accountTypeLimits[type] && (
                              <div className="text-xs text-blue-200 mt-1">
                                Limit: €{verificationResult.metadata.accountTypeLimits[type].toLocaleString()}
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                      <div className="mt-2 text-center">
                        <span className="text-white text-sm font-medium">
                          Total: {verificationResult.metadata.accountsVerified || 0} accounts verified
                        </span>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default ComplianceVerifier;
